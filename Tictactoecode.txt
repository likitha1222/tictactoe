<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        h1 {
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5rem;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-info {
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .current-player, .score {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin: 30px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            backdrop-filter: blur(5px);
        }

        .cell {
            width: 100px;
            height: 100px;
            background: linear-gradient(145deg, #ffffff, #e6e6e6);
            border: none;
            border-radius: 15px;
            font-size: 2.5rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 
                0 4px 8px rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

        .cell::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            transition: left 0.5s;
        }

        .cell:hover {
            transform: translateY(-2px);
            box-shadow: 
                0 8px 16px rgba(0, 0, 0, 0.15),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
        }

        .cell:hover::before {
            left: 100%;
        }

        .cell:active {
            transform: translateY(1px);
            box-shadow: 
                0 2px 4px rgba(0, 0, 0, 0.1),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
        }

        .cell.x {
            color: #e74c3c;
            text-shadow: 0 2px 4px rgba(231, 76, 60, 0.3);
            animation: popIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        .cell.o {
            color: #3498db;
            text-shadow: 0 2px 4px rgba(52, 152, 219, 0.3);
            animation: popIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }

        .cell.winning {
            background: linear-gradient(145deg, #f1c40f, #f39c12);
            animation: pulse 1s infinite;
            box-shadow: 0 0 20px rgba(241, 196, 15, 0.5);
        }

        @keyframes popIn {
            0% {
                transform: scale(0.8);
                opacity: 0;
            }
            50% {
                transform: scale(1.1);
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 30px;
            font-size: 1.1rem;
            font-weight: 600;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #f093fb 0%, #f5576c 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(240, 147, 251, 0.4);
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(240, 147, 251, 0.6);
        }

        .status {
            font-size: 1.4rem;
            font-weight: 600;
            margin: 20px 0;
            color: #333;
            min-height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .winner {
            background: linear-gradient(45deg, #f1c40f, #f39c12);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: bounce 0.6s ease-in-out;
        }

        @keyframes bounce {
            0%, 20%, 60%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            80% {
                transform: translateY(-5px);
            }
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background: #f1c40f;
            animation: confetti-fall 3s linear infinite;
        }

        @keyframes confetti-fall {
            to {
                transform: translateY(100vh) rotate(360deg);
            }
        }

        @media (max-width: 480px) {
            .game-container {
                padding: 20px;
            }
            
            .cell {
                width: 80px;
                height: 80px;
                font-size: 2rem;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .game-info {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>🎮 Tic-Tac-Toe 🎮</h1>
        
        <div class="game-info">
            <div class="current-player">
                Current Player: <span id="currentPlayer">X</span>
            </div>
            <div class="score">
                X: <span id="scoreX">0</span> | O: <span id="scoreO">0</span> | Draws: <span id="scoreDraw">0</span>
            </div>
        </div>
        
        <div class="status" id="status">Player X's turn</div>
        
        <div class="board" id="board">
            <button class="cell" data-index="0"></button>
            <button class="cell" data-index="1"></button>
            <button class="cell" data-index="2"></button>
            <button class="cell" data-index="3"></button>
            <button class="cell" data-index="4"></button>
            <button class="cell" data-index="5"></button>
            <button class="cell" data-index="6"></button>
            <button class="cell" data-index="7"></button>
            <button class="cell" data-index="8"></button>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary" onclick="resetGame()">🔄 New Game</button>
            <button class="btn btn-secondary" onclick="resetScore()">📊 Reset Score</button>
        </div>
    </div>

    <script>
        class TicTacToe {
            constructor() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                this.score = { X: 0, O: 0, draw: 0 };
                this.winPatterns = [
                    [0, 1, 2], [3, 4, 5], [6, 7, 8],
                    [0, 3, 6], [1, 4, 7], [2, 5, 8],
                    [0, 4, 8], [2, 4, 6]
                ];
                this.init();
            }

            init() {
                this.updateDisplay();
                this.attachEventListeners();
            }

            attachEventListeners() {
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => {
                    cell.addEventListener('click', (e) => this.handleCellClick(e));
                });
            }

            handleCellClick(e) {
                const index = parseInt(e.target.dataset.index);
                
                if (this.board[index] !== '' || !this.gameActive) {
                    return;
                }

                this.makeMove(index);
            }

            makeMove(index) {
                this.board[index] = this.currentPlayer;
                const cell = document.querySelector(`[data-index="${index}"]`);
                cell.textContent = this.currentPlayer;
                cell.classList.add(this.currentPlayer.toLowerCase());
                
                if (this.checkWin()) {
                    this.handleWin();
                } else if (this.checkDraw()) {
                    this.handleDraw();
                } else {
                    this.switchPlayer();
                }
                
                this.updateDisplay();
            }

            checkWin() {
                return this.winPatterns.some(pattern => {
                    const [a, b, c] = pattern;
                    if (this.board[a] && this.board[a] === this.board[b] && this.board[a] === this.board[c]) {
                        this.winningPattern = pattern;
                        return true;
                    }
                    return false;
                });
            }

            checkDraw() {
                return this.board.every(cell => cell !== '');
            }

            handleWin() {
                this.gameActive = false;
                this.score[this.currentPlayer]++;
                this.highlightWinningCells();
                this.createConfetti();
                
                setTimeout(() => {
                    document.getElementById('status').innerHTML = 
                        `<span class="winner">🎉 Player ${this.currentPlayer} Wins! 🎉</span>`;
                }, 100);
            }

            handleDraw() {
                this.gameActive = false;
                this.score.draw++;
                document.getElementById('status').textContent = "🤝 It's a Draw! 🤝";
            }

            switchPlayer() {
                this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
            }

            highlightWinningCells() {
                this.winningPattern.forEach(index => {
                    const cell = document.querySelector(`[data-index="${index}"]`);
                    cell.classList.add('winning');
                });
            }

            createConfetti() {
                for (let i = 0; i < 50; i++) {
                    setTimeout(() => {
                        const confetti = document.createElement('div');
                        confetti.className = 'confetti';
                        confetti.style.left = Math.random() * 100 + 'vw';
                        confetti.style.background = ['#f1c40f', '#e74c3c', '#3498db', '#2ecc71', '#9b59b6'][Math.floor(Math.random() * 5)];
                        document.body.appendChild(confetti);
                        
                        setTimeout(() => {
                            confetti.remove();
                        }, 3000);
                    }, i * 50);
                }
            }

            updateDisplay() {
                document.getElementById('currentPlayer').textContent = this.currentPlayer;
                document.getElementById('scoreX').textContent = this.score.X;
                document.getElementById('scoreO').textContent = this.score.O;
                document.getElementById('scoreDraw').textContent = this.score.draw;
                
                if (this.gameActive) {
                    document.getElementById('status').textContent = `Player ${this.currentPlayer}'s turn`;
                }
            }

            reset() {
                this.board = Array(9).fill('');
                this.currentPlayer = 'X';
                this.gameActive = true;
                this.winningPattern = null;
                
                const cells = document.querySelectorAll('.cell');
                cells.forEach(cell => {
                    cell.textContent = '';
                    cell.className = 'cell';
                });
                
                this.updateDisplay();
            }

            resetScore() {
                this.score = { X: 0, O: 0, draw: 0 };
                this.updateDisplay();
            }
        }

        const game = new TicTacToe();

        function resetGame() {
            game.reset();
        }

        function resetScore() {
            game.resetScore();
        }
    </script>
</body>
</html>